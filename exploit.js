//ATTENTION VIBECODE VIBE ATTENTION // AHTUNG


document.addEventListener('DOMContentLoaded', function() {
    const userInfoDiv = document.getElementById('userInfo');

    // Function to create info line
    function createInfoLine(label, value) {
        const p = document.createElement('p');
        p.innerHTML = `<strong>${label}:</strong> ${value}`;
        return p;
    }

    // Basic browser information
    userInfoDiv.appendChild(createInfoLine('User Agent', navigator.userAgent));
    const userAgent = navigator.userAgent;
    if (userAgent.includes("Firefox/")) {
        userInfoDiv.appendChild(createInfoLine('⬆️Respect💯', '🔥Фуррифокс⬆️'));
    }
    userInfoDiv.appendChild(createInfoLine('Browser Language', navigator.language));
    userInfoDiv.appendChild(createInfoLine('Browser Languages', navigator.languages ? navigator.languages.join(', ') : 'Not available'));
    userInfoDiv.appendChild(createInfoLine('Cookies Enabled', navigator.cookieEnabled));
    userInfoDiv.appendChild(createInfoLine('Online Status', navigator.onLine ? 'Online' : 'Offline'));
    userInfoDiv.appendChild(createInfoLine('Platform', navigator.platform));
    if (navigator.platform == 'Linux x86_64' || 'Linux x86') {
    userInfoDiv.appendChild(createInfoLine('⬆️Respect💯', '🔥for Linux⬆️'));
    }
    userInfoDiv.appendChild(createInfoLine('CPU Cores', navigator.hardwareConcurrency || 'Not available'));
    if (navigator.hardwareConcurrency >= 32) {
        userInfoDiv.appendChild(createInfoLine('⬆️Respect💯', '🔥for Xeons/Epics/Threadrippers⬆️'));
    }
    userInfoDiv.appendChild(createInfoLine('Max Touch Points', navigator.maxTouchPoints || 'Not available'));

    // Screen information
    userInfoDiv.appendChild(createInfoLine('Screen Resolution', `${screen.width} x ${screen.height}`));
    userInfoDiv.appendChild(createInfoLine('Available Screen Size', `${screen.availWidth} x ${screen.availHeight}`));
    userInfoDiv.appendChild(createInfoLine('Color Depth', `${screen.colorDepth} bit`));
    userInfoDiv.appendChild(createInfoLine('Pixel Depth', `${screen.pixelDepth} bit`));
    userInfoDiv.appendChild(createInfoLine('Device Pixel Ratio', window.devicePixelRatio || 1));

    // Window information
    userInfoDiv.appendChild(createInfoLine('Viewport Size', `${window.innerWidth} x ${window.innerHeight}`));
    userInfoDiv.appendChild(createInfoLine('Window Outer Size', `${window.outerWidth} x ${window.outerHeight}`));

    // Browser capabilities
    userInfoDiv.appendChild(createInfoLine('Java Enabled', navigator.javaEnabled() ? 'Yes' : 'No'));
    userInfoDiv.appendChild(createInfoLine('PDF Viewer Enabled', navigator.pdfViewerEnabled || 'Unknown'));
    userInfoDiv.appendChild(createInfoLine('WebDriver', navigator.webdriver ? 'Yes' : 'No'));

    // Connection information
    const connection = navigator.connection || navigator.mozConnection || navigator.webkitConnection;
    if (connection) {
        userInfoDiv.appendChild(createInfoLine('Connection Type', connection.effectiveType || 'Not available'));
        userInfoDiv.appendChild(createInfoLine('Connection Downlink', connection.downlink ? `${connection.downlink} Mbps` : 'Not available'));
        userInfoDiv.appendChild(createInfoLine('Connection RTT', connection.rtt ? `${connection.rtt} ms` : 'Not available'));
        userInfoDiv.appendChild(createInfoLine('Data Saver Mode', connection.saveData ? 'Enabled' : 'Disabled'));
    }

    // Device memory
    userInfoDiv.appendChild(createInfoLine('Device Memory', navigator.deviceMemory ? `${navigator.deviceMemory} GB` : 'Not available'));

    // Battery status
    if ('getBattery' in navigator) {
        navigator.getBattery().then(function(battery) {
            userInfoDiv.appendChild(createInfoLine('Battery Level', `${Math.round(battery.level * 100)}%`));
            userInfoDiv.appendChild(createInfoLine('Battery Charging', battery.charging ? 'Yes' : 'No'));
            userInfoDiv.appendChild(createInfoLine('Battery Charging Time', battery.chargingTime === Infinity ? 'Not charging' : `${battery.chargingTime} seconds`));
            userInfoDiv.appendChild(createInfoLine('Battery Discharging Time', battery.dischargingTime === Infinity ? 'Not discharging' : `${battery.dischargingTime} seconds`));
        });
    }

    // Geolocation (with permission)
    if ('geolocation' in navigator) {
        navigator.geolocation.getCurrentPosition(
            function(position) {
                userInfoDiv.appendChild(createInfoLine('Latitude', position.coords.latitude));
                userInfoDiv.appendChild(createInfoLine('Longitude', position.coords.longitude));
                userInfoDiv.appendChild(createInfoLine('Accuracy', `${position.coords.accuracy} meters`));
                userInfoDiv.appendChild(createInfoLine('Altitude', position.coords.altitude || 'Not available'));
                userInfoDiv.appendChild(createInfoLine('Altitude Accuracy', position.coords.altitudeAccuracy ? `${position.coords.altitudeAccuracy} meters` : 'Not available'));
                userInfoDiv.appendChild(createInfoLine('Heading', position.coords.heading || 'Not available'));
                userInfoDiv.appendChild(createInfoLine('Speed', position.coords.speed || 'Not available'));
            },
            function(error) {
                userInfoDiv.appendChild(createInfoLine('Geolocation', `Error: ${error.message}`));
            }
        );
    } else {
        userInfoDiv.appendChild(createLine('Geolocation', 'Not supported'));
    }

    // Time information
    userInfoDiv.appendChild(createInfoLine('Current Time', new Date().toString()));
    userInfoDiv.appendChild(createInfoLine('Timezone', Intl.DateTimeFormat().resolvedOptions().timeZone));
    userInfoDiv.appendChild(createInfoLine('Timezone Offset', new Date().getTimezoneOffset()));

    // Local storage information
    userInfoDiv.appendChild(createInfoLine('Local Storage', isLocalStorageAvailable() ? 'Available' : 'Not available'));
    userInfoDiv.appendChild(createInfoLine('Session Storage', isSessionStorageAvailable() ? 'Available' : 'Not available'));

    // WebGL information
    const webglInfo = getWebGLInfo();
    userInfoDiv.appendChild(createInfoLine('WebGL Vendor', webglInfo.vendor));
    userInfoDiv.appendChild(createInfoLine('WebGL Renderer', webglInfo.renderer));

    // Font information
    userInfoDiv.appendChild(createInfoLine('Fonts', getAvailableFonts().join(', ')));

    // Plugin information
    userInfoDiv.appendChild(createInfoLine('Plugins', getPlugins().join(', ')));

    // MIME types information
    userInfoDiv.appendChild(createInfoLine('MIME Types', getMimeTypes().join(', ')));

    // IP address (using external service)
    fetch('https://api.ipify.org?format=json')
    .then(response => response.json())
    .then(data => {
        userInfoDiv.appendChild(createInfoLine('Public IP Address', data.ip));
    })
    .catch(error => {
        userInfoDiv.appendChild(createInfoLine('Public IP Address', 'Unable to retrieve'));
    });

    // Helper functions
    function isLocalStorageAvailable() {
        try {
            const test = 'test';
            localStorage.setItem(test, test);
            localStorage.removeItem(test);
            return true;
        } catch(e) {
            return false;
        }
    }

    function isSessionStorageAvailable() {
        try {
            const test = 'test';
            sessionStorage.setItem(test, test);
            sessionStorage.removeItem(test);
            return true;
        } catch(e) {
            return false;
        }
    }

    function getWebGLInfo() {
        const canvas = document.createElement('canvas');
        const gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');

        if (!gl) {
            return { vendor: 'Not available', renderer: 'Not available' };
        }

        const debugInfo = gl.getExtension('WEBGL_debug_renderer_info');
        if (debugInfo) {
            return {
                vendor: gl.getParameter(debugInfo.UNMASKED_VENDOR_WEBGL),
                          renderer: gl.getParameter(debugInfo.UNMASKED_RENDERER_WEBGL)
            };
        }

        return { vendor: 'Unknown', renderer: 'Unknown' };
    }

    function getAvailableFonts() {
        const fonts = [
            'Arial', 'Arial Black', 'Comic Sans MS', 'Courier New',
            'Georgia', 'Impact', 'Times New Roman', 'Trebuchet MS',
            'Verdana', 'Webdings', 'Helvetica', 'Tahoma'
        ];

        return fonts.filter(font => {
            return document.fonts.check(`12px "${font}"`);
        });
    }

    function getPlugins() {
        const plugins = [];
        for (let i = 0; i < navigator.plugins.length; i++) {
            plugins.push(navigator.plugins[i].name);
        }
        return plugins.length > 0 ? plugins : ['No plugins detected'];
    }

    function getMimeTypes() {
        const mimeTypes = [];
        for (let i = 0; i < navigator.mimeTypes.length; i++) {
            mimeTypes.push(navigator.mimeTypes[i].type);
        }
        return mimeTypes.length > 0 ? mimeTypes : ['No MIME types detected'];
    }
});
